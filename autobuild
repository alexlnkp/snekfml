#!/bin/bash

# NOTE: Better to have UPX if you want to build the lowest possible executable.

set -e

ADDFLAGS=""
COMPRESS=true
BTYPE=release

show_help() {
	echo "Usage: $0 [OPTION] [ARG]"
	echo
	echo "       Common flags:"
	echo
	echo "  -h,  --help              Show this help message and exit."
	echo "  -d,  --debug             Build the program in debug mode."
	echo
	echo "  -gd, --graphical-debug   Build the program with GraphicDebugging"
	echo
	echo "       OVERRIDE flags:"
	echo
	echo "  -n,  --no-compression    Don't apply any additional compression to compiled executable"
	echo "  -f,  --force-compression Force compression on compiled executable"
	echo "  -X,  --force-reconfigure Forcefully remove build directory and reconfigure meson"
	echo
	echo "  Note: If no flags are given, the program will be built in release mode with extra compression afterwards."
	echo
}

<<'###BLOCK-COMMENT'

Fun fact: building with `./autobuild -d -f` leads to 13252 bytes size.
Building with `./autobuild` leads to 13480 bytes size

In other words - building as debug leads to lower size executable, for some reason.

$ ./autobuild

. . .

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     31368 ->     13480   42.97%   linux/amd64   main

---------------------------------------------------------------

$ ./autobuild -d -f

. . .

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     35520 ->     13252   37.31%   linux/amd64   main

---------------------------------------------------------------

###BLOCK-COMMENT

# To build        Debug - use `./autobuild -d`
# To build GraphicDebug - use `./autobuild -d X`
for arg in "$@"; do
    case $arg in
        -d|--debug) 
			BTYPE=debug
            COMPRESS=0 ;;

		-gd|--graphical-debug)
			ADDFLAGS="$ADDFLAGS -D cpp_args='-DGRAPHIC_DEBUG'"
			BTYPE=debug
			COMPRESS=0 ;;

        -h|--help)
            show_help
            exit 0 ;;
        
        -n|--no-compression)
            echo Will not compress compiled executable.
            COMPRESS=false ;;

		-f|--force-compression)
			echo Will force compression on compiled executable
			COMPRESS=true ;;

		-X|--force-reconfigure)
			ADDFLAGS="$ADDFLAGS --reconfigure"
			rm -rI 'build/' ;;

        -*|--*)
            echo "Unknown option $arg"
            show_help
            exit 1 ;;
        *)
            break ;;
    esac
done

# Just build with config in meson.build
if [[ ! -d  "build/" ]]; then
	meson setup build --buildtype $BTYPE $ADDFLAGS
fi

meson compile -C build && mv build/snek output/snek

# Compress if not building Debug.
if [[ $COMPRESS ]]; then
	# Stripping everything that isn't required to launch the app
	strip -x -X -s -R .gnu.version -R .gnu.version_r. output/snek

	if command -p which upx; then
		echo "UPX found, proceeding to compress the binary..."
		upx --overlay=strip --best --compress-icons=3 --no-reloc --all-methods --all-filters --no-lzma output/snek
		exit 0
	else
		echo "UPX not found. Exiting..."
		exit 0
	fi
fi

exit 0